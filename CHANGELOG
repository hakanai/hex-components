
Version X.X (XXXX-XX-XX)

     New: Added an interpreter for null-terminated strings.
     New: Added interpreters for strings with unknown encoding (binary strings.)

Version 0.6 (2014-06-24)

     New: Added a method to set the preferred visible row count so that you can make the viewer default
          to a larger (or smaller) size without having to calculate font sizes.
     New: Added a method to set the selection start and end at the same time.
     New: Added methods to assist in moving focus into the location bar.

   Fixed: Fixed the font specified in the UI not taking effect.
   Fixed: Fixed interpreting certain 64-bit values.
   Fixed: Fixed unexpected error clicking in the viewer before a binary was set.

 Changed: ExpandableAccessoryBar now animates when expanding or collapsing.
 Changed: Mutable* annotation classes were removed as it was starting to cause a combinatorial problem
          in the class hierarchy.
 Changed: Changed the default font for Mac OS X to Monaco 13pt.
 Changed: AnnotationCollectionListener now has separate events for added and removed. Logic for adding and
          removing has been moved up to AbstractAnnotationCollection to support this.
 Changed: Introduced MutableAnnotationCollection which enforces that added and removed annotations are
          also mutable (so that when doing add/remove, you can safely cast to the mutable sub-interface.)
 Changed: Improved generics on APIs (MutableGroupAnnotation only contains MutableAnnotation, for instance.)
 Changed: Charset parameter is now type Charset instead of String.

Version 0.5 (2014-05-01)

     New: DateInterpreterStorage for storage and retrieval of date interpreters.
     New: Added new interpreters for signed types.
     New: Added new interpreter for 16-bit and 128-bit IEEE754 binary floating point.
     New: Added new interpreters for dates and times:
        * C time_t values
        * Java time values
        * Windows NT FILETIME
        * Windows NT SYSTEMTIME
        * Windows OLE VT_DATE / PT_APPTIME
        * IBM Notes TIMEDATE
        * Mac OS X NSDate / CFDateRef
        * Mac OS classic dates
     New: Added accessory bar components which can go at the bottom of the viewer. One shows where you are
          in the viewer and allows entering a new offset and length to jump to. The other shows the selected
          value using a selected interpreter. A combined ExpandableAccessoryBar ties these together with UI
          to expand and collapse the bars.
     New: Value classes now know how to convert themselves to localised strings.

   Fixed: Fixed an issue where a *really* large binary would not let you mouse select past some point in the
          file despite keyboard navigation working as normal.

 Changed: The hex viewport now properly paints its border so that you can see where your focus is.
 Changed: Default colours now come from the UI defaults. Colours which are not in the UI defaults are
          derived from the TextArea defaults if no specific setting is present.
 Changed: Replaced InterpreterInfo#getHumanName method with a proper getLocalisedName which looks up from
          a resource bundle.
 Changed: binary, annotations and bytesPerRow are now JavaBeans bound properties on HexViewer.

Version 0.4 (2013-12-01)

     New: HexViewer now contains its own scroll bar, rather than having you put it in a scroll pane.
          This is primarily so that painting the component is no longer constrained by Swing dimensions,
          meaning that much larger files can be viewed now.
     New: Filled in a lot of common keyboard shortcuts for the basic UI and their equivalents for Mac OS X.
     New: Errors reading from the binary now render as a red cross placeholder.
     New: AnnotationColourScheme decides which colours to paint for each annotation.

   Fixed: Fixed an issue where creating an annotation group larger than Integer.MAX_VALUE would overflow.
   Fixed: Fixed loading a file larger than Integer.MAX_VALUE using BinaryFactory. Larger files will now use
          a slower FileChannel approach instead of memory mapping.
   Fixed: HexViewer#setBytesPerRow() now calls invalidate, so that the GUI properly updates the layout.
   Fixed: Annotation borders paint properly for values other than 16 bytes per row.

 Changed: The code now requires Java 7 to run.
 Changed: When navigating to the top or bottom row, the view scrolls one line further, so that the border
          is visible.
 Changed: Unprintable ASCII characters are now a distinct kind of dot which users hopefully won't confuse
          for a normal period.
 Changed: setBinary() now sets an empty annotation collection as a side-effect, if the collection is null.
 Changed: The offset column is now rendered as wide as necessary to fit the largest offset.

Version 0.3 (2012-11-09)

 Changed: Separated the components usable in other apps into a reusable library, licenced under LGPL 3.
 Changed: Zero-width annotations removed as they were causing altogether too much trouble (e.g. when sorting a list
          of annotations, it's hard to know which one is first.)  The structure DSL is updated to not drop an
          array annotation in if the length would be zero, which was the common cause for it.

(Version 0.2 didn't really exist - this project was part of Hex at the time so the changelog can be found there.)
